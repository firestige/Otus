@startuml Plugin Loading Sequence

title SkyWalking Satellite 插件加载时序图

actor "启动程序" as Main
participant "boot.go" as Boot
participant "plugins/init.go" as PluginInit
participant "plugin.Registry" as Registry
participant "config.Loader" as ConfigLoader
participant "SatelliteConfig" as Config
participant "gatherer.create" as GathererCreate
participant "sender.create" as SenderCreate
participant "sharing.Manager" as Sharing

== 1. 系统初始化阶段 ==

Main -> Boot: Start(cfg)
activate Boot

Boot -> PluginInit: RegisterPlugins()
activate PluginInit

note over PluginInit : 注册所有插件类型和实现
PluginInit -> Registry: RegisterPluginCategory(Receiver)
PluginInit -> Registry: RegisterPluginCategory(Forwarder)
PluginInit -> Registry: RegisterPluginCategory(Queue)
PluginInit -> Registry: RegisterPluginCategory(Server)
PluginInit -> Registry: RegisterPluginCategory(Client)

PluginInit -> Registry: RegisterPlugin(grpc-native-log-receiver)
PluginInit -> Registry: RegisterPlugin(native-log-grpc-forwarder)
PluginInit -> Registry: RegisterPlugin(memory-queue)
note right: 注册具体插件实现到对应类型下

PluginInit --> Boot: 插件注册完成
deactivate PluginInit

== 2. 配置加载阶段 ==

Boot -> ConfigLoader: Load(configPath)
activate ConfigLoader

ConfigLoader -> Config: 解析YAML配置
note over Config : satellite_config.yaml\n包含pipes配置\n每个pipe指定plugin_name

ConfigLoader --> Boot: SatelliteConfig
deactivate ConfigLoader

== 3. 共享插件初始化 ==

Boot -> Sharing: Load(cfg.Sharing)
activate Sharing

loop for each server config
    Sharing -> Registry: Get(ServerType, serverConfig)
    Registry --> Sharing: Server实例
    note right: 根据plugin_name创建Server插件
end

loop for each client config  
    Sharing -> Registry: Get(ClientType, clientConfig)
    Registry --> Sharing: Client实例
    note right: 根据plugin_name创建Client插件
end

Boot -> Sharing: Prepare()
Boot -> Sharing: Start()
Sharing --> Boot: 共享插件启动完成
deactivate Sharing

== 4. 模块创建阶段 ==

loop for each pipe in config.Pipes

    Boot -> GathererCreate: NewGatherer(gathererConfig)
    activate GathererCreate
    
    alt if ReceiverConfig != nil
        GathererCreate -> Registry: Get(ReceiverType, receiverConfig)
        note right: plugin_name: "grpc-native-log-receiver"
        Registry --> GathererCreate: Receiver实例
        
        GathererCreate -> Registry: Get(QueueType, queueConfig)  
        note right: plugin_name: "memory-queue"
        Registry --> GathererCreate: Queue实例
        
        GathererCreate -> Sharing: Manager[serverName]
        note right: server_name: "grpc-server"
        Sharing --> GathererCreate: 共享Server实例
    end
    
    GathererCreate --> Boot: ReceiverGatherer
    deactivate GathererCreate
    
    Boot -> SenderCreate: NewSender(senderConfig)
    activate SenderCreate
    
    loop for each forwarder config
        SenderCreate -> Registry: Get(ForwarderType, forwarderConfig)
        note right: plugin_name: "native-log-grpc-forwarder"
        Registry --> SenderCreate: Forwarder实例
    end
    
    SenderCreate -> Registry: Get(FallbackerType, fallbackerConfig)
    Registry --> SenderCreate: Fallbacker实例
    
    SenderCreate -> Sharing: Manager[clientName]
    note right: client_name: "grpc-client"
    Sharing --> SenderCreate: 共享Client实例
    
    SenderCreate --> Boot: Sender
    deactivate SenderCreate

end

== 5. 模块依赖注入 ==

note over Boot : 建立模块间依赖关系
Boot -> Boot: gatherer.SetProcessor(processor)
Boot -> Boot: processor.SetGatherer(gatherer) 
Boot -> Boot: processor.SetSender(sender)
Boot -> Boot: sender.SetGatherer(gatherer)

== 6. 模块启动 ==

Boot -> Boot: prepareModules()
note over Boot : 调用所有模块的Prepare()

Boot -> Boot: bootModules()
note over Boot : 并发启动所有模块的Boot()

Boot --> Main: 系统启动完成
deactivate Boot

== 插件配置注入细节 ==

note over Registry : **plugin.Get()内部过程**\n1. 根据plugin_name查找插件实例\n2. 通过反射创建新实例\n3. 合并默认配置和用户配置\n4. 使用viper注入配置到插件\n5. 返回配置好的插件实例

note over Sharing : **共享插件设计**\n• Server插件被多个Gatherer共享\n• Client插件被多个Sender共享\n• 通过名称引用而非重复创建\n• 减少连接资源消耗

@enduml
