@startuml SkyWalking Satellite Core Dependencies

!define LAYER1 #FFE6E6
!define LAYER2 #E6F3FF  
!define LAYER3 #E6FFE6
!define LAYER4 #FFF0E6

title SkyWalking Satellite 插件系统核心依赖关系

' 分层架构
rectangle "启动层 (Boot Layer)" LAYER1 {
    component [cmd/main.go] as main
    component [boot.go] as boot
}

rectangle "配置层 (Config Layer)" LAYER2 {
    component [satellite_config.yaml] as yaml
    component [loader.go] as loader
    component [satellite_config.go] as config
}

rectangle "核心框架层 (Framework Layer)" LAYER3 {
    component [plugin Registry] as registry
    component [sharing Manager] as sharing
    component [Module API] as moduleApi
}

rectangle "模块层 (Module Layer)" LAYER4 {
    component [Gatherer] as gatherer
    component [Processor] as processor  
    component [Sender] as sender
}

rectangle "插件层 (Plugin Layer)" LAYER1 {
    package "Plugin Types" {
        component [Receiver] as receiver
        component [Forwarder] as forwarder
        component [Queue] as queue
        component [Server] as server
        component [Client] as client
        component [Filter] as filter
        component [Fallbacker] as fallbacker
    }
    
    package "Plugin Implementations" {
        component [grpc-native-log-receiver] as logReceiver
        component [native-log-grpc-forwarder] as logForwarder
        component [memory-queue] as memQueue
        component [grpc-server] as grpcServer
        component [grpc-client] as grpcClient
    }
}

' === 核心依赖流 ===

' 1. 启动流程
main --> boot : "启动"
boot --> loader : "加载配置"
boot --> registry : "注册插件"
boot --> sharing : "初始化共享插件"
boot --> gatherer : "创建模块"
boot --> processor : "创建模块"
boot --> sender : "创建模块"

' 2. 配置流程  
yaml --> loader : "解析YAML"
loader --> config : "创建配置对象"
config --> gatherer : "模块配置"
config --> processor : "模块配置"
config --> sender : "模块配置"

' 3. 插件注册流程
registry --> receiver : "注册插件类型"
registry --> forwarder : "注册插件类型"
registry --> queue : "注册插件类型" 
registry --> server : "注册插件类型"
registry --> client : "注册插件类型"

receiver --> logReceiver : "注册实现"
forwarder --> logForwarder : "注册实现"
queue --> memQueue : "注册实现"
server --> grpcServer : "注册实现"
client --> grpcClient : "注册实现"

' 4. 模块创建流程
gatherer --> receiver : "通过plugin_name获取"
gatherer --> queue : "通过plugin_name获取"
gatherer --> server : "通过server_name获取(共享)"

sender --> forwarder : "通过plugin_name获取"
sender --> fallbacker : "通过plugin_name获取"
sender --> client : "通过client_name获取(共享)"

' 5. 共享插件管理
sharing --> server : "管理Server插件"
sharing --> client : "管理Client插件"

' 6. 模块间协作
gatherer --> processor : "数据流"
processor --> sender : "数据流"
sender --> gatherer : "确认信号"

' 7. 运行时数据流
logReceiver --> memQueue : "接收数据"
memQueue --> filter : "队列数据"
filter --> logForwarder : "处理后数据"

' === 关键说明 ===
note top of registry : **插件注册中心**\n• 基于反射的类型注册\n• map[Type]map[Name]Value\n• 插件实例化和配置注入

note top of sharing : **共享插件管理器**\n• Server插件: 多个Gatherer共享\n• Client插件: 多个Sender共享\n• 减少资源消耗

note bottom of config : **配置映射机制**\n• YAML → Go Struct\n• plugin_name → 具体插件\n• 环境变量覆盖

note bottom of boot : **启动协调器**\n• 1. 注册所有插件类型\n• 2. 加载配置文件\n• 3. 创建模块实例\n• 4. 建立模块依赖关系

' === 数据流向图例 ===
legend right
  |= 符号 |= 含义 |
  | → | 依赖关系 |
  | ⟹ | 数据流 |
  | plugin_name | 配置中指定的插件名称 |
  | server_name/client_name | 共享插件的引用名称 |
endlegend

@enduml
